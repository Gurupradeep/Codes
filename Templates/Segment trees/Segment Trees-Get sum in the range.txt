SEGMENT TREES-GET SUM IN THE RANGE
#include <iostream>
using namespace std;

int const_tree(int a[],int tree[],int rs,int re,int i)
{
    //Leaf node
    if(rs==re)
    {
        tree[i]=a[rs];
        return a[rs];
    }

    //Otherwise go on building the tree
    else
    {
        int mid=(rs+re)/2;
        tree[i]=const_tree(a,tree,rs,mid,2*i)+const_tree(a,tree,mid+1,re,2*i+1);
        return tree[i];
    }
}

int get_sum(int tree[],int rs,int re,int gs,int ge,int i)
{
    //Total overlap
    if(gs<=rs&&ge>=re)
        return tree[i];

    //No overlap
    else if(gs>re||ge<rs)
        return 0;

    //Partial overlap
    else
    {
        int mid=(rs+re)/2;
        return get_sum(tree,rs,mid,gs,ge,2*i)+get_sum(tree,mid+1,re,gs,ge,2*i+1);
    }

}

void update(int tree[],int rs,int re,int x,int diff,int i)  /*'x' is the index of the element in the array which has been updated*/
{
    //Responsibility range does not include updated index
    if(x<rs||x>re)
        return;

    else
    {
        tree[i]+=diff;
        //Stop updating if leaf node has been reached(if condition becomes false)
        if(rs!=re)
        {
            //If leaf node has not been reached, continue updating
            int mid=(rs+re)/2;
            update(tree,rs,mid,x,diff,2*i);
            update(tree,mid+1,re,x,diff,2*i+1);
        }
    }
}

//Driver Program
int main()
{
    int tree[100],a[50];
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
        cin>>a[i];

    //Construction of the tree
    const_tree(a,tree,0,n-1,1);

    //Input range for getting the sum
    int st,en;
    cin>>st>>en;

    //Get sum in the range query
    cout<<get_sum(tree,0,n-1,st,en,1)<<"\n";

    //Input index and value for updating
    int index,dif,new_val;
    cin>>index>>new_val;
    dif=new_val-a[index];
    a[index]=new_val;

    //Updating the tree
    update(tree,0,n-1,index,dif,1);

    //Get sum query again to check if the tree has been updated
    cin>>st>>en;
    cout<<get_sum(tree,0,n-1,st,en,1);
    return 0;
}
